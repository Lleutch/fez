-module('Microsoft.FSharp.Collections.ListModule').

-export([
    append/2,
    average/1,
    averageBy/2,
    choose/2,
    chunkBySize/2,
    collect/2,
    comparewith/3,
    concat/1,
    contains/2,
    countBy/2,
    distinct/1,
    empty/0,
    exists/2,
    exists2/3,
    filter/2,
    find/2,
    findIndex/2,
    fold/3,
    fold2/4,
    foldBack/3,
    foldBack2/4,
    forall/2,
    forall2/3,
    head/1,
    init/2,
    isEmpty/1,
    iter/2,
    iter2/3,
    iteri/2,
    iteri2/3,
    length/1,
    map/2,
    map2/3,
    map3/4,
    mapi/2,
    mapi2/3,
    max/1,
    maxBy/2,
    min/1,
    minBy/2,
    nth/2,
    % ofArray/1,
    ofSeq/1,
    partition/2,
    permute/2,
    pick/2,
    reduce/2,
    reduceBack/2,
    replicate/2,
    rev/1,
    scan/3,
    scanBack/3,
    sort/1,
    sortBy/2,
    sortWith/2,
    sum/1,
    sumBy/2,
    tail/1,
    % toArray/1,
    toSeq/1,
    tryFind/2,
    tryFindIndex/2,
    tryPick/2,
    unzip/1,
    unzip3/1,
    zip/2,
    zip3/3
]).

%%---------------------- *** Name *** ---------------------------%%
%%                          append
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a new list that contains the elements of the first l
%% ist followed by elements of the second.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T list  -> 'T list
%%---------------------------------------------------------------%%
append(L1, L2) -> lists:append(L1, L2).


%%---------------------- *** Name *** ---------------------------%%
%%                          average
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the average of the elements in the list.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> ^T
%%---------------------------------------------------------------%%
average(L) -> averageBy(fun(X) -> X end,L).


%%---------------------- *** Name *** ---------------------------%%
%%                          averageBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the average of the elements generated by applying th
%% e function to each element of the list.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> ^U)  -> 'T list  -> ^U
%%---------------------------------------------------------------%%
averageBy(Projection,L) ->
  averageBy(Projection,L,0,0).
averageBy(Projection,[X],AccSum,AccLength) ->
  AccSum + Projection(X) / AccLength;
averageBy(Projection,[First|Rest],AccSum,AccLength) ->
  averageBy(Projection, Rest, AccSum + First, AccLength + 1).


%%---------------------- *** Name *** ---------------------------%%
%%                          choose
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to each element of the list. Retu
%% rns the list comprised of the results for each element where
%%  the function returns Some.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U option)  -> 'T list  -> 'U list
%%---------------------------------------------------------------%%
choose(Fun, L) ->
  lists:filter(fun (E) -> Fun(E) =/= undefined end, L).


%%---------------------- *** Name *** ---------------------------%%
%%                          chunkBySize
%%-------------------- *** Document *** -------------------------%%
%%
%% Divides the input list into chunks of size at most chunkSize.
%%---------------------- *** Type *** ---------------------------%%
%% int  -> 'T list  -> 'T list list
%%---------------------------------------------------------------%%
chunkBySize(Len,List) ->
  L =
    lists:foldl(
      fun (E, []) -> [[E]];
        (E, [H|RAcc]) when erlang:length(H) < Len  -> [H ++ [E]|RAcc] ;
        (E, [H|RAcc]) -> [[E],H|RAcc]
      end
      , []
      , List),
  lists:reverse(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          collect
%%-------------------- *** Document *** -------------------------%%
%%
%% For each element of the list, applies the given function.
%% Concatenates all the results and return the combined list.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U list)  -> 'T list  -> 'U list
%%---------------------------------------------------------------%%
collect(Fun, L) ->
  lists:flatten(lists:map(Fun, L)).


%%---------------------- *** Name *** ---------------------------%%
%%                          comparewith
%%-------------------- *** Document *** -------------------------%%
%%
%% Compares two lists using the given comparison function, element
%% by element.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'T  -> int)  -> 'T list  -> 'T list  -> int
%%---------------------------------------------------------------%%
comparewith(Fun, [H1|T1], [H2|T2]) ->
  case Fun(H1, H2) of
    0 -> comparewith(Fun, T1, T2) ;
    X -> X
  end;
comparewith(_, [], []) -> 0;
comparewith(_, [], _) -> -1;
comparewith(_, _, []) -> 1.


%%---------------------- *** Name *** ---------------------------%%
%%                          concat
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a new list that contains the elements of each the lists
%% in order.
%%---------------------- *** Type *** ---------------------------%%
%% seq&lt;'T list&gt;  -> 'T list
%%---------------------------------------------------------------%%
concat(SeqOfList) ->
  concat(SeqOfList,[]).
concat([],Acc) ->
  Acc;
concat([Head|Tail],Acc) ->
  concat(Tail,lists:append(Head,Acc)).


%%---------------------- *** Name *** ---------------------------%%
%%                          contains
%%-------------------- *** Document *** -------------------------%%
%%
%% Evaluates to true if the given element is in the input list.
%%---------------------- *** Type *** ---------------------------%%
%% 'T  -> 'T list  -> bool
%%---------------------------------------------------------------%%
contains(I, L) ->
  lists:member(I, L).


%%---------------------- *** Name *** ---------------------------%%
%%                          countBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a key-generating function to each element of a list
%% and returns a list yielding unique keys and their number of
%% occurrences in the original list.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'Key)  -> 'T list  -> ('Key * int) list
%%---------------------------------------------------------------%%
countBy(Generator,List) ->
  L1 = map(Generator,List),
  L2 = lists:sort(L1),
  countBy(L2,[],0).
countBy([],Acc,_) ->
  Acc;
countBy([H1],Acc,Counter) ->
  [{H1,Counter + 1}|Acc];
countBy([H1|Tail],Acc,Counter) when H1 =:= hd(Tail) ->
  countBy(Tail,Acc,Counter+1);
countBy([H1|Tail],Acc,Counter) when H1 /= hd(Tail) ->
  countBy(Tail,[{H1,Counter+1}|Acc],0).


%%---------------------- *** Name *** ---------------------------%%
%%                          distinct
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a list that contains no duplicate entries according
%% to generic hash and equality comparisons on the entries. If
%% an element occurs multiple times in the list then the later
%% occurrences are discarded.
%%---------------------- *** Type *** ---------------------------%%
%% 'T  -> 'T list
%%---------------------------------------------------------------%%
distinct(List) ->
  lists:reverse(lists:foldl(
    fun(Elem, Acc) ->
      case lists:member(Elem, Acc) of
        true ->
          Acc;
        false ->
          [Elem|Acc]
      end
    end, [], List
  )).


%%---------------------- *** Name *** ---------------------------%%
%%                          empty
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns an empty list of the given type.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list
%%---------------------------------------------------------------%%
empty() -> [].


%%---------------------- *** Name *** ---------------------------%%
%%                          exists
%%-------------------- *** Document *** -------------------------%%
%%
%% Tests if any element of the list satisfies the given predicate.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> bool
%%---------------------------------------------------------------%%
exists(Pred, L) ->
  lists:any(Pred, L).


%%---------------------- *** Name *** ---------------------------%%
%%                          exists2
%%-------------------- *** Document *** -------------------------%%
%%
%% Tests if any pair of corresponding elements of the lists
%% satisfies the given predicate.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> bool)  -> 'T1 list  -> 'T2 list  -> bool
%%---------------------------------------------------------------%%
exists2(_,[],[]) -> false;
exists2(_,[],_) ->
  erlang:error(badarg);
exists2(_,_,[]) ->
  erlang:error(badarg);
exists2(Pred,[H1|T1],[H2|T2]) ->
  case Pred(H1,H2) of
    true -> true;
    false -> exists2(Pred,T1,T2)
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          filter
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a new collection containing only the elements of the
%%  collection for which the given predicate returns true.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> 'T list
%%---------------------------------------------------------------%%
filter(Pred, L) ->
  lists:filter(Pred, L).


%%---------------------- *** Name *** ---------------------------%%
%%                          find
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the first element for which the given function
%% returns true.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> 'T
%%---------------------------------------------------------------%%
find(Pred, L) ->
  head(lists:dropwhile(fun (I) -> not Pred(I) end, L)).


%%---------------------- *** Name *** ---------------------------%%
%%                          findIndex
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the index of the first element in the list that
%% satisfies the given predicate.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> int
%%---------------------------------------------------------------%%
findIndex(Pred,L) ->
  findIndex(Pred,L,0) .
findIndex(_,[],_) ->
  erlang:error(badarg);
findIndex(Pred,[H|T],Index) ->
  case Pred(H) of
    true -> Index;
    false -> findIndex(Pred,T,Index+1)
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          fold
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to each element of the collection, thread
%% ing an accumulator argument through the computation.
%% This function takes the second argument, and applies the
%% function to it and the first element of the list.
%% Then, it passes this result into the function along with the
%% second element, and so on.
%% Finally, it returns the final result. If the input function is
%% f and the elements are (i0...iN), then this function computes
%% ( f (... (f s i0) i1 ...) iN).
%%---------------------- *** Type *** ---------------------------%%
%% ('State  -> 'T  -> 'State)  -> 'State  -> 'T list  -> 'State
%%---------------------------------------------------------------%%
fold(_, State, []) ->
  State;
fold(Fold, State, [H|T]) ->
  fold(Fold, Fold(State,H), T).


%%---------------------- *** Name *** ---------------------------%%
%%                          fold2
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to corresponding elements of two collections,
%% threading an accumulator argument through the computation.
%% The collections must have identical sizes. If the input
%% function is f and the elements are (i0...iN)
%% and (j0...jN), then this function computes
%% ( f (... (f s i0 j0)...) iN jN )
%%---------------------- *** Type *** ---------------------------%%
%% ('State  -> 'T1  -> 'T2  -> 'State)  -> 'State  -> 'T1 list  ->
%% 'T2 list  -> 'State
%%---------------------------------------------------------------%%
fold2(_,State,[],[]) ->
  State;
fold2(_,_,[],_) ->
  erlang:error(badarg);
fold2(_,_,_,[]) ->
  erlang:error(badarg);
fold2(Fold,State,[H1|T1],[H2|T2]) ->
  fold2(Fold,Fold(State,H1,H2),T1,T2).


%%---------------------- *** Name *** ---------------------------%%
%%                          foldBack
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to each element of the collection, threading
%% an accumulator argument through the computation. If the
%% input function is <strong>f</strong> and the elements are (i0...iN)
%% then computes ( f i0 (...(f iN s)) ).
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'State  -> 'State)  -> 'T list  -> 'State  -> 'State
%%---------------------------------------------------------------%%
foldBack(Fold,L,State) ->
  lists:foldr(Fold,State,L).


%%---------------------- *** Name *** ---------------------------%%
%%                          foldBack2
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to corresponding elements of two collections,
%% threading an accumulator argument through the computation.
%% The collections must have identical sizes. If the input
%% function is f and the elements are (i0...iN)
%% and (j0...jN), then this function computes
%% (f i0 j0 (...(f iN jN s))).
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> 'State  -> 'State)  -> 'T1 list  ->
%% 'T2 list  -> 'State  -> 'State
%%---------------------------------------------------------------%%
foldBack2(_,[],[],State) ->
  State;
foldBack2(_,[],_,_) ->
  erlang:error(badarg);
foldBack2(_,_,[],_) ->
  erlang:error(badarg);
foldBack2(Fold,[H1|T1],[H2|T2],State) ->
  Fold(H1,H2,foldBack2(Fold,T1,T2,State)).


%%---------------------- *** Name *** ---------------------------%%
%%                          forall
%%-------------------- *** Document *** -------------------------%%
%%
%% Tests if all elements of the collection satisfy the given
%% predicate.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> bool
%%---------------------------------------------------------------%%
forall(Pred,L) ->
  lists:all(Pred,L).


%%---------------------- *** Name *** ---------------------------%%
%%                          forall2
%%-------------------- *** Document *** -------------------------%%
%%
%% Tests if all corresponding elements of the collection satisfy
%% the given predicate pairwise.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> bool)  -> 'T1 list  -> 'T2 list  -> bool
%%---------------------------------------------------------------%%
forall2(_,[],[]) ->
  true;
forall2(_,[],_) ->
  erlang:error(badarg);
forall2(_,_,[]) ->
  erlang:error(badarg);
forall2(Pred,[H1|T1],[H2|T2]) ->
  case Pred(H1,H2) of
    true -> forall2(Pred,T1,T2);
    false -> false
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          head
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the first element of the list.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T
%%---------------------------------------------------------------%%
head([H | _]) -> H.


%%---------------------- *** Name *** ---------------------------%%
%%                          init
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a list by calling the given generator on each index.
%%
%%---------------------- *** Type *** ---------------------------%%
%% int  -> (int  -> 'T)  -> 'T list
%%---------------------------------------------------------------%%
init(Len,Init) ->
  init(Len,Init,[],0).
init(Len,_,Acc,_) when Len == 0 ->
  lists:reverse(Acc);
init(Len,Init,Acc,Index) ->
  init(Len-1,Init,[Init(Index)|Acc],Index+1).


%%---------------------- *** Name *** ---------------------------%%
%%                          isEmpty
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns <strong>true</strong> if the list contains no elements,
%% false otherwise.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> bool
%%---------------------------------------------------------------%%
isEmpty([]) -> true;
isEmpty([_|_]) -> false.


%%---------------------- *** Name *** ---------------------------%%
%%                          iter
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to each element of the collection.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> unit)  -> 'T list  -> unit
%%---------------------------------------------------------------%%
iter(Iter,L) -> lists:foreach(Iter,L).


%%---------------------- *** Name *** ---------------------------%%
%%                          iter2
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to two collections simultaneously.
%% The collections must have identical size.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> unit)  -> 'T1 list  -> 'T2 list  -> unit
%%---------------------------------------------------------------%%
iter2(_,[],[]) ->
  ok;
iter2(_,[],_) ->
  erlang:error(badarg);
iter2(_,_,[]) ->
  erlang:error(badarg);
iter2(Iter,[H1|T1],[H2|T2]) ->
  Iter(H1,H2),
  iter2(Iter,T1,T2).


%%---------------------- *** Name *** ---------------------------%%
%%                          iteri
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to each element of the collection.
%% The integer passed to the function indicates the index of element.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> 'T  -> unit)  -> 'T list  -> unit
%%---------------------------------------------------------------%%
iteri(Iteri,L) ->
  iteri(Iteri,L,0).
iteri(_,[],_) ->
  ok;
iteri(Iteri,[H|T],Index) ->
  Iteri(Index,H),
  iteri(Iteri,T,Index+1).


%%---------------------- *** Name *** ---------------------------%%
%%                          iteri2
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to two collections simultaneously.
%% The collections must have identical size. The integer passed
%% to the function indicates the index of element.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> 'T1  -> 'T2  -> unit)  -> 'T1 list  -> 'T2 list  ->
%% unit
%%---------------------------------------------------------------%%
iteri2(Iteri,L1,L2) ->
  iteri2(Iteri,L1,L2,0).
iteri2(_,[],[],_) ->
  ok;
iteri2(_,[],_,_) ->
  erlang:error(badarg);
iteri2(_,_,[],_) ->
  erlang:error(badarg);
iteri2(Iter,[H1|T1],[H2|T2],Index) ->
  Iter(Index,H1,H2),
  iteri2(Iter,T1,T2,Index+1).


%%---------------------- *** Name *** ---------------------------%%
%%                          length
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the length of the list.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> int
%%---------------------------------------------------------------%%
length(L) -> erlang:length(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          map
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a new collection whose elements are the results of
%% applying the given function to each of the elements of the
%% collection.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U)  -> 'T list  -> 'U list
%%---------------------------------------------------------------%%
map(Fun,List) ->
  map(Fun,List,[]).
map(_,[],Acc) ->
  lists:reverse(Acc);
map(Fun,[H|T],Acc) ->
  map(Fun,T,[Fun(H)|Acc]).


%%---------------------- *** Name *** ---------------------------%%
%%                          map2
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a new collection whose elements are the results of
%% applying the given function to the corresponding elements of
%% the two collections pairwise.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> 'U)  -> 'T1 list  -> 'T2 list  -> 'U list
%%---------------------------------------------------------------%%
map2(Fun,L1,L2) ->
  map2(Fun,L1,L2,[]).
map2(_,[],[],Acc) ->
  lists:reverse(Acc);
map2(_,[],_,_) ->
  erlang:error(badarg);
map2(_,_,[],_) ->
  erlang:error(badarg);
map2(Fun,[H1|T1],[H2|T2],Acc) ->
  map2(Fun,T1,T2,[Fun(H1,H2)|Acc]).


%%---------------------- *** Name *** ---------------------------%%
%%                          map3
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a new collection whose elements are the results of
%% applying the given function to the corresponding elements of
%% the three collections simultaneously.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1  -> 'T2  -> 'T3  -> 'U)  -> 'T1 list  -> 'T2 list  ->
%% 'T3 list  ->
%% 'U list
%%---------------------------------------------------------------%%
map3(Fun,L1,L2,L3) ->
  map3(Fun,L1,L2,L3,[]).
map3(_,[],[],[],Acc) ->
  lists:reverse(Acc);
map3(_,[],_,_,_) ->
  erlang:error(badarg);
map3(_,_,[],_,_) ->
  erlang:error(badarg);
map3(_,_,_,[],_) ->
  erlang:error(badarg);
map3(Fun,[H1|T1],[H2|T2],[H3|T3],Acc) ->
  map3(Fun,T1,T2,T3,[Fun(H1,H2,H3)|Acc]).


%%---------------------- *** Name *** ---------------------------%%
%%                          mapi
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a new collection whose elements are the results of
%% applying the given function to each of the elements of the
%% collection. The integer index passed to the function indicates
%%  the index (from 0) of element being transformed.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> 'T  -> 'U)  -> 'T list  -> 'U list
%%---------------------------------------------------------------%%
mapi(Mapi,List) ->
  mapi(Mapi,List,[],0).
mapi(_,[],Acc,_) ->
  lists:reverse(Acc);
mapi(Mapi,[H|T],Acc,Index) ->
  mapi(Mapi,T,[Mapi(Index,H)|Acc],Index+1).


%%---------------------- *** Name *** ---------------------------%%
%%                          mapi2
%%-------------------- *** Document *** -------------------------%%
%%
%% Like List.mapi, but mapping corresponding elements from two
%% lists of equal length.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> 'T1  -> 'T2  -> 'U)  -> 'T1 list  -> 'T2 list  ->
%% 'U list
%%---------------------------------------------------------------%%
mapi2(Mapi,L1,L2) ->
  mapi2(Mapi,L1,L2,[],0).
mapi2(_,[],[],Acc,_) ->
  lists:reverse(Acc);
mapi2(_,_,[],_,_) ->
  erlang:error(badarg);
mapi2(_,[],_,_,_) ->
  erlang:error(badarg);
mapi2(Mapi,[H1|T1],[H2|T2],Acc,Index) ->
  mapi2(Mapi,T1,T2,[Mapi(Index,H1,H2)|Acc],Index+1).


%%---------------------- *** Name *** ---------------------------%%
%%                          max
%%-------------------- *** Document *** -------------------------%%
%%
%% Return the greatest of all elements of the list, compared by
%%  using Operators.max.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T
%%---------------------------------------------------------------%%
max(List) -> lists:max(List).


%%---------------------- *** Name *** ---------------------------%%
%%                          maxBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the greatest of all elements of the list, compared b
%% y using Operators.max on the function result.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U)  -> 'T list  -> 'T
%%---------------------------------------------------------------%%
maxBy(_,[]) ->
  erlang:error(badarg);
maxBy(Projection,[H|T]) ->
  maxBy(Projection,T,H).
maxBy(_,[],_) ->
  erlang:error(badarg);
maxBy(Projection,[H],Max) ->
  erlang:max(Projection(H),Max);
maxBy(Projection,[H|T],Max) ->
  maxBy(Projection,T,erlang:max(Max,Projection(H))).


%%---------------------- *** Name *** ---------------------------%%
%%                          min
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the lowest of all elements of the list, compared by
%% using Operators.min.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T
%%---------------------------------------------------------------%%
min(List) -> lists:min(List).


%%---------------------- *** Name *** ---------------------------%%
%%                          minBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the lowest of all elements of the list, compared by
%% using Operators.min on the function result.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U)  -> 'T list  -> 'T
%%---------------------------------------------------------------%%
minBy(_,[]) ->
  erlang:error(badarg);
minBy(Projection,[H|T]) ->
  minBy(Projection,T,H).
minBy(_,[],_) ->
  erlang:error(badarg);
minBy(Projection,[H],Max) ->
  erlang:max(Projection(H),Max);
minBy(Projection,[H|T],Max) ->
  minBy(Projection,T,erlang:min(Max,Projection(H))).


%%---------------------- *** Name *** ---------------------------%%
%%                          nth
%%-------------------- *** Document *** -------------------------%%
%%
%% Indexes into the list. The first element has index 0.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> int  -> 'T
%%---------------------------------------------------------------%%
nth(List,N) -> lists:nth(N,List).


%%---------------------- *** Name *** ---------------------------%%
%%                          ofArray
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a list from the given array.
%%---------------------- *** Type *** ---------------------------%%
%% 'T []  -> 'T list
%%---------------------------------------------------------------%%
% TODO : Fill with the correct argument
%ofArray(_) -> ().


%%---------------------- *** Name *** ---------------------------%%
%%                          ofSeq
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a new list from the given enumerable object.
%%---------------------- *** Type *** ---------------------------%%
%% seq<'T>  -> 'T list
%%---------------------------------------------------------------%%
ofSeq(List) ->
  'Microsoft.FSharp.Collections.SeqModule':toList(List).


%%---------------------- *** Name *** ---------------------------%%
%%                          partition
%%-------------------- *** Document *** -------------------------%%
%%
%% Splits the collection into two collections, containing the
%% elements for which the given predicate returns true and false
%% respectively.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list * 'T list
%%---------------------------------------------------------------%%
partition(Pred,List) ->
  lists:partition(Pred,List).


%%---------------------- *** Name *** ---------------------------%%
%%                          permute
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a list with all elements permuted according to the
%% specified permutation.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> int)  -> 'T list  -> 'T list
%%---------------------------------------------------------------%%
permute(Permute,List) ->
  case erlang:length(distinct(mapi(fun(Index,_) -> Permute(Index) end ,List))) == erlang:length(List) of
    false -> erlang:error(not_permutable);
    true ->
      ListIndexed = mapi(fun(Index,Elem) -> {Permute(Index),Elem} end ,List),
      ListIndexedSorted = lists:sort(ListIndexed),
      mapi(fun(_,{_,Elem}) -> Elem end, ListIndexedSorted)
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          pick
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to successive elements, returning
%% the first result where function returns Some for some value.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U option)  -> 'T list  -> 'U
%%---------------------------------------------------------------%%
pick(_,[]) ->
  erlang:error(key_not_found);
pick(Chooser,[H|T]) ->
  case Chooser(H) of
    none -> pick(Chooser,T);
    {some,Value} -> Value
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          reduce
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to each element of the collection, thread
%% ing an accumulator argument through the computation.
%% This function applies the specified function to the first two
%% elements of the list. It then passes this result into the
%% function along with the third element, and so on. Finally,
%% it returns the final result. If the input function is f and the elements are
%% (i0...iN), then this function computes
%% (f (... (f i0 i1) i2 ...) iN)
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'T  -> 'T)  -> 'T list  -> 'T
%%---------------------------------------------------------------%%
reduce(Reduction, List) ->
  reduce(Reduction,List,[]).
reduce(_, [], []) ->
  erlang:error(badarg);
reduce(_, [], [Acc]) ->
  Acc;
reduce(_, [H], []) ->
  H;
reduce(Reduction, [H], [Acc]) ->
  Reduction(Acc,H);
reduce(Reduction, [H1|[H2|T]], []) ->
  reduce(Reduction,T, [Reduction(H1,H2)]);
reduce(Reduction, [H1|T], [Acc]) ->
  reduce(Reduction,T, [Reduction(Acc,H1)]).


%%---------------------- *** Name *** ---------------------------%%
%%                          reduceBack
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to each element of the collection, thread
%% ing an accumulator argument through the computation. If the
%% input function is f and the elements are (i0...iN),
%% then this function computes (f i0 (...(f iN-1 iN))).
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'T  -> 'T)  -> 'T list  -> 'T
%%---------------------------------------------------------------%%
removeLast(List) ->
  removeLast(List,[]).
removeLast([_],Acc) ->
  lists:reverse(Acc);
removeLast([H|T],Acc) ->
  removeLast(T,[H|Acc]).

reduceBack(_, []) ->
  erlang:error(badarg);
reduceBack(_, [H]) ->
  H;
reduceBack(Reduce, [H|T]) ->
  reduceBack(Reduce,removeLast([H|T]),lists:last(T)).

reduceBack(_, [],State) ->
  State;
reduceBack(Reduce, [H|T],State) ->
  Res = reduceBack(Reduce,T,State),
  Res2 = Reduce(Res,H),
  Res2.


%%---------------------- *** Name *** ---------------------------%%
%%                          replicate
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates a list by calling the given generator on each index.
%%---------------------- *** Type *** ---------------------------%%
%% (int  -> 'T  -> 'T list)
%%---------------------------------------------------------------%%
replicate(N,Elem) -> lists:duplicate(N,Elem).


%%---------------------- *** Name *** ---------------------------%%
%%                          rev
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns a new list with the elements in reverse order.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T list
%%---------------------------------------------------------------%%
rev(L) -> lists:reverse(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          scan
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies a function to each element of the collection, thread
%% ing an accumulator argument through the computation.
%% This function takes the second argument, and applies the specified
%% function to it and the first element of the list.
%% Then, it passes this result into the function along with the
%% second element and so on. Finally, it returns the list of
%% intermediate results and the final result.
%%---------------------- *** Type *** ---------------------------%%
%% ('State  -> 'T  -> 'State)  -> 'State  -> 'T list  ->
%% 'State list
%%---------------------------------------------------------------%%
scan(Folder,State,List) ->
  scan(Folder,State,List,[]).
scan(_,_,[],Acc) ->
  lists:reverse(Acc);
scan(Folder,State,[H|T],Acc) ->
  NewState = Folder(State,H),
  scan(Folder,NewState,T,[NewState|Acc]).


%%---------------------- *** Name *** ---------------------------%%
%%                          scanBack
%%-------------------- *** Document *** -------------------------%%
%%
%% Like foldBack, but returns both the intermediate and final results
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'State  -> 'State)  -> 'T list  -> 'State  ->
%% 'State list
%%---------------------------------------------------------------%%
scanBack(_,[],_) ->
  [];
scanBack(Folder,[H|T],State) ->
  NewState = Folder(H,State),
  [NewState|scanBack(Folder,T,NewState)].


%%---------------------- *** Name *** ---------------------------%%
%%                          sort
%%-------------------- *** Document *** -------------------------%%
%%
%% Sorts the given list using Operators.compare.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T list
%%---------------------------------------------------------------%%
sort(L) ->
  lists:sort(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          sortBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Sorts the given list using keys given by the given projection.
%% Keys are compared using Operators.compare.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'Key)  -> 'T list  -> 'T list
%%---------------------------------------------------------------%%
sortBy(Projection,List) ->
  ListProjected = map(fun(X) -> {Projection(X),X} end, List),
  ListSorted = lists:keysort(1,ListProjected),
  map(fun({_,X}) -> X end, ListSorted).


%%---------------------- *** Name *** ---------------------------%%
%%                          sortWith
%%-------------------- *** Document *** -------------------------%%
%%
%% Sorts the given list using the given comparison function.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'T  -> int)  -> 'T list  -> 'T list
%%---------------------------------------------------------------%%
sortWith(_, []) -> [];
sortWith(Comparer, [H|T]) ->
  Res = Comparer(H,H),
  TupledList = lists:reverse(sortWith(Comparer,T,[{H,Res}],H)),
  SortedTupledList = sortBy( fun ({_,Compared}) -> Compared end,TupledList),
  map(fun({Elem,_}) -> Elem end, SortedTupledList).

sortWith(_,[],Acc,_) ->
  Acc;
sortWith(Comparer,[H],Acc,Head) ->
  [{H,Comparer(Head,H)}|Acc];
sortWith(Comparer,[H|T],Acc,Head) ->
  Res = Comparer(Head,H),
  sortWith(Comparer,T,[{H,Res}|Acc],Head).


%%---------------------- *** Name *** ---------------------------%%
%%                          sum
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the sum of the elements in the list.
%%---------------------- *** Type *** ---------------------------%%
%% ^T list  -> ^T
%%---------------------------------------------------------------%%
sum(L) ->
  lists:sum(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          sumBy
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the sum of the results generated by applying the
%% function to each element of the list.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> ^U)  -> 'T list  -> ^U
%%---------------------------------------------------------------%%
sumBy(Projection,List) ->
  sumBy(Projection,List,0).
sumBy(_,[],Acc) ->
  Acc;
sumBy(Projection,[H|T],Acc) ->
  sumBy(Projection,T,Projection(H) + Acc).


%%---------------------- *** Name *** ---------------------------%%
%%                          tail
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the input list without the first element.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T list
%%---------------------------------------------------------------%%
tail(List) -> lists:last(List).


%%---------------------- *** Name *** ---------------------------%%
%%                          toArray
%%-------------------- *** Document *** -------------------------%%
%%
%% Creates an array from the given list.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> 'T []
%%---------------------------------------------------------------%%
% TODO : Fill with the correct argument
%toArray(_) -> ().


%%---------------------- *** Name *** ---------------------------%%
%%                          toSeq
%%-------------------- *** Document *** -------------------------%%
%%
%% Views the given list as a sequence.
%%---------------------- *** Type *** ---------------------------%%
%% 'T list  -> seq&lt;'T&gt;
%%---------------------------------------------------------------%%
toSeq(List) ->
  'Microsoft.FSharp.Collections.SeqModule':ofList(List).


%%---------------------- *** Name *** ---------------------------%%
%%                          tryFind
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the first element for which the given function
%% returns true. Return None if no such element exists.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> 'T option
%%---------------------------------------------------------------%%
tryFind(_,[]) ->
  none;
tryFind(Pred,[H|T]) ->
  case Pred(H) of
    true -> {some,H};
    false -> tryFind(Pred,T)
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          tryFindIndex
%%-------------------- *** Document *** -------------------------%%
%%
%% Returns the index of the first element in the list that
%% satisfies the given predicate. Return None if no such
%% element exists.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> bool)  -> 'T list  -> int option
%%---------------------------------------------------------------%%
tryFindIndex(Pred,List) ->
  tryFindIndex(Pred,List,0).
tryFindIndex(_,[],_) ->
  none;
tryFindIndex(Pred,[H|T],Index) ->
  case Pred(H) of
    true -> {some,Index};
    false -> tryFindIndex(Pred,T,Index+1)
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          tryPick
%%-------------------- *** Document *** -------------------------%%
%%
%% Applies the given function to successive elements, returning
%%  the first result where function returns Some for some value.
%% If no such element exists then return None.
%%---------------------- *** Type *** ---------------------------%%
%% ('T  -> 'U option)  -> 'T list  -> 'U option
%%---------------------------------------------------------------%%
tryPick(_,[]) ->
  none;
tryPick(Chooser,[H|T]) ->
  case Chooser(H) of
    none -> tryPick(Chooser,T);
    {some,Value} -> {some,Value}
  end.


%%---------------------- *** Name *** ---------------------------%%
%%                          unzip
%%-------------------- *** Document *** -------------------------%%
%%
%% Splits a list of pairs into two lists.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1 * 'T2) list  -> 'T1 list * 'T2 list
%%---------------------------------------------------------------%%
unzip(L) -> lists:unzip(L ).


%%---------------------- *** Name *** ---------------------------%%
%%                          unzip3
%%-------------------- *** Document *** -------------------------%%
%%
%% Splits a list of triples into three lists.
%%---------------------- *** Type *** ---------------------------%%
%% ('T1 * 'T2 * 'T3) list  -> 'T1 list * 'T2 list * 'T3 list
%%---------------------------------------------------------------%%
unzip3(L) -> lists:unzip3(L).


%%---------------------- *** Name *** ---------------------------%%
%%                          zip
%%-------------------- *** Document *** -------------------------%%
%%
%% Combines the two lists into a list of pairs.
%% The two lists must have equal lengths.
%%---------------------- *** Type *** ---------------------------%%
%% 'T1 list  -> 'T2 list  -> ('T1 * 'T2) list
%%---------------------------------------------------------------%%
zip(L1,L2) -> lists:zip(L1,L2).


%%---------------------- *** Name *** ---------------------------%%
%%                          zip3
%%-------------------- *** Document *** -------------------------%%
%%
%% Combines the three lists into a list of triples.
%% The lists must have equal lengths.
%%---------------------- *** Type *** ---------------------------%%
%% 'T1 list  -> 'T2 list  -> 'T3 list  ->
%% ('T1 * 'T2 * 'T3) list
%%---------------------------------------------------------------%%
zip3(L1,L2,L3) -> lists:zip3(L1,L2,L3).


